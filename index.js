const express = require("express");
const bodyParser = require("body-parser");
const cors = require('cors');
const { Telegraf, Markup } = require("telegraf");
require("dotenv").config();
const app = express();
app.use(cors({
  origin: process.env.CLIENT_ORIGINS.split(','),
  methods: ['POST'],
  allowedHeaders: ['Content-Type'],
  credentials: true
}));
const bot = new Telegraf(process.env.BOT_TOKEN);

// Middleware
app.use(bodyParser.json());

// –ü–∞–Ω–µ–ª—å –∫–æ–º–∞–Ω–¥ –≤ –¢–ì
async function setCommands() {
  await bot.telegram.setMyCommands([
    { command: 'start', description: '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º' },
    { command: 'info', description: '–£–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ' },
  ]);
  console.log('–ü–∞–Ω–µ–ª—å –∫–æ–º–∞–Ω–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
}

setCommands();

// Form handler
app.post("/submit-form", async function (req, res) {
  try {
    console.log(req.body)
    const { company, contact, phone, email } = req.body;

    await bot.telegram.sendMessage(
      process.env.CHAT_ID,
      `üìù *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞*\n\nüè¢ **–ö–æ–º–ø–∞–Ω–∏—è:** ${company}\nüë§ **–ö–æ–Ω—Ç–∞–∫—Ç:** ${contact}\nüì± **–¢–µ–ª–µ—Ñ–æ–Ω:** ${phone}\nüìß **Email:** ${email}\n\n–î–∞—Ç–∞ –ø–æ–¥–∞—á–∏: ${new Date().toLocaleString()}`,
      {
        parse_mode: 'Markdown',
        ...Markup.inlineKeyboard([
          Markup.button.url('üåê –°–∞–π—Ç –∫–æ–º–ø–∞–Ω–∏–∏', 'https://bleskoff.ru')
        ])
      }
    );

    res.status(200).json({ success: true });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:", error);
    res.status(500).json({ success: false });
  }
});

app.get("/", (_, res) => {
  res.status(200).json({ message: "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç" });
});

// Bot commands
bot.command('info', (ctx) => {
  ctx.replyWithHTML(`<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ</b>

–í–µ—Ä—Å–∏—è: 1.0
–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: BleskOFF
–û–ø–∏—Å–∞–Ω–∏–µ: –ë–æ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–æ–∫ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–µ`);
});

// Bot setup
bot.launch()
app.listen(process.env.PORT, () => {
    return console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${process.env.PORT}`)
});

// Enable graceful stop
process.once("SIGINT", () => bot.stop("SIGINT"));
process.once("SIGTERM", () => bot.stop("SIGTERM"));
